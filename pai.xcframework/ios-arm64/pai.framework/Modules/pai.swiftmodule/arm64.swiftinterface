// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3 (swiftlang-1200.0.29.2 clang-1200.0.30.1)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name pai
import CommonCrypto
import CoreData
import CoreLocation
import DataCompression
import Dispatch
import FirebaseCore
import FirebaseCrashlytics
import FirebaseMessaging
import Foundation
import Swift
import SystemConfiguration
import UIKit
import UserNotifications
import os
public enum PNFlashMode : Swift.Int {
  case defaultMode
  case instantDisplayMode
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
public enum PNSDKMode : Swift.Int {
  case serverLogin
  case clientLogin
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
public enum PNInboxMessageReadStatus : Swift.String {
  case read
  case unread
  case deleted
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
}
public enum PNDeeplinkType : Swift.String {
  case deepLink
  case dismiss
  case share
  case webview
  case noOperation
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers open class PNNotificationServiceExtension : UserNotifications.UNNotificationServiceExtension {
  @objc override dynamic open func didReceive(_ request: UserNotifications.UNNotificationRequest, withContentHandler contentHandler: @escaping (UserNotifications.UNNotificationContent) -> Swift.Void)
  @objc override dynamic open func serviceExtensionTimeWillExpire()
  open func start() -> pai.PNExtensionConfig?
  @objc deinit
  @objc override dynamic public init()
}
public struct PNExtensionConfig : Swift.Codable {
  public init(appGroupName: Swift.String, clientId: Swift.String, hMacKey: Swift.String, configEndPoint: Swift.String, isStaging: Swift.Bool)
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
precedencegroup OptionalAssignment {
  associativity: right
}
infix operator ?= : OptionalAssignment
public struct PNConstantsStore {
  public struct PushNotificationKeys {
    public static let inboxListUpdatedNotification: Swift.String
  }
}
@_hasMissingDesignatedInitializers final public class PNInboxMessage : Swift.CustomStringConvertible, Swift.Hashable {
  final public let pushId: Swift.String
  final public let customerId: Swift.String
  final public var readStatus: pai.PNInboxMessageReadStatus? {
    get
  }
  final public var deepLink: pai.PNDeeplink? {
    get
  }
  final public var receivedTime: Foundation.Date? {
    get
  }
  final public var expiryDate: Foundation.Date? {
    get
  }
  final public var payload: [Swift.AnyHashable : Any]? {
    get
  }
  final public var extra: [Swift.AnyHashable : Any]? {
    get
  }
  final public var title: Swift.String? {
    get
  }
  final public var body: Swift.String? {
    get
  }
  final public var imageURL: Swift.String? {
    get
  }
  final public func isUnread() -> Swift.Bool
  final public func isDeleted() -> Swift.Bool
  final public func isRead() -> Swift.Bool
  final public var description: Swift.String {
    get
  }
  public static func == (lhs: pai.PNInboxMessage, rhs: pai.PNInboxMessage) -> Swift.Bool
  final public func hash(into hasher: inout Swift.Hasher)
  @objc deinit
  final public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class PNCrashlyticsTrackingError : Swift.Error {
  final public let fileInfo: Swift.String
  public var failureReason: Swift.String
  public var errorCode: Swift.Int
  final public let apiEndPoint: Swift.String?
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class PNFlashAppearanceConfigurator {
  final public func updateFlashMessageAppearance(fontColor: UIKit.UIColor?, backgroundColor: UIKit.UIColor?)
  final public func updateFlashMessageAppearance(fontColorHex: Swift.String, backgroundColorHex: Swift.String)
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class PNSilentNotification {
  final public let userInfo: [Swift.AnyHashable : Any]
  final public let extraInfo: [Swift.AnyHashable : Any]?
  @objc deinit
}
@_hasMissingDesignatedInitializers public class PNPushBaseButton : Swift.CustomStringConvertible {
  final public let title: Swift.String
  final public let deepLinkType: pai.PNDeeplinkType?
  public var deepLink: pai.PNDeeplink?
  public var description: Swift.String {
    get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class PNNotificationManager : ObjectiveC.NSObject {
  public static let shared: pai.PNNotificationManager
  weak final public var delegate: pai.PNPTMPushNotificationDelegate?
  final public var debugEnabled: Swift.Bool {
    get
    set
  }
  final public func start(appGroupName: Swift.String, clientId: Swift.String, key: Swift.String, delegate: pai.PNPTMPushNotificationDelegate, loggedInUserId: Swift.String? = nil, firebaseConfigFile: Swift.String? = nil, isStaging: Swift.Bool = false, sdkMode: pai.PNSDKMode = .serverLogin, configEndPoint: Swift.String, flashMode: pai.PNFlashMode = .defaultMode, flashPrimaryColorInHex: Swift.String? = nil, flashSecondaryColorInHex: Swift.String? = nil)
  @objc deinit
}
extension PNNotificationManager {
  final public func getFCMToken() -> Swift.String?
  final public func getChannel() -> pai.PNChannel?
  final public func getDeviceId() -> Swift.String?
}
extension PNNotificationManager {
  final public func application(_ application: UIKit.UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Foundation.Data)
  final public func application(_ application: UIKit.UIApplication, didFailToRegisterForRemoteNotificationsWithError error: Swift.Error)
  final public func application(_ application: UIKit.UIApplication?, receiveRemoteNotification userInfo: [Swift.AnyHashable : Any]?, handler completionHandler: ((UIKit.UIBackgroundFetchResult) -> Swift.Void)?)
  final public func userNotificationCenter(_ center: UserNotifications.UNUserNotificationCenter, willPresent notification: UserNotifications.UNNotification, withCompletionHandler completionHandler: @escaping (UserNotifications.UNNotificationPresentationOptions) -> Swift.Void)
  final public func userNotificationCenter(_ center: UserNotifications.UNUserNotificationCenter, didReceive response: UserNotifications.UNNotificationResponse, withCompletionHandler completionHandler: @escaping () -> Swift.Void)
}
extension PNNotificationManager {
  final public func login(user: Swift.String)
  final public func logout()
  final public func isUserIdAvailable() -> Swift.Bool
}
extension PNNotificationManager {
  final public func inboxMessageList() -> [pai.PNInboxMessage]
  final public func syncInboxMessages()
  final public func markInboxAllMessagesRead()
  final public func markMessagesRead(inboxMessages: [pai.PNInboxMessage])
  final public func markMessagesUnRead(inboxMessages: [pai.PNInboxMessage], completion: ((Swift.Bool) -> Swift.Void)?)
  final public func delete(inboxMessages: [pai.PNInboxMessage], completion: ((Swift.Bool) -> Swift.Void)?)
  final public func didClicked(message: pai.PNInboxMessage, initiateDeepLink: Swift.Bool)
  final public func messageDisplayed(message: pai.PNInboxMessage)
}
extension PNNotificationManager {
  final public func displayFlashMessage()
}
public protocol PNPTMPushNotificationDelegate : AnyObject {
  func deviceLanguage() -> Swift.String?
  func received(deepLink: pai.PNDeeplink?)
  func topViewController() -> UIKit.UIViewController?
  func sharedApplication() -> UIKit.UIApplication?
  func didRecieve(channel: pai.PNChannel)
  func receivedSilentPush(_ silentNotification: pai.PNSilentNotification)
  func willDisplayFlashMessage(with payload: [Swift.AnyHashable : Any]?, appearanceConfigurator: pai.PNFlashAppearanceConfigurator)
  func didDisplayFlashMessage(with payload: [Swift.AnyHashable : Any]?)
  func logSDKGeneric(error: pai.PNCrashlyticsTrackingError)
  func firebaseConfigrationDone()
  func receivedInteractiveAction(on button: pai.PNPushBaseButton, deepLink: pai.PNDeeplink?)
}
extension PNPTMPushNotificationDelegate {
  public func logSDKGeneric(error: pai.PNCrashlyticsTrackingError)
  public func willDisplayFlashMessage(with payload: [Swift.AnyHashable : Any]?, appearanceConfigurator: pai.PNFlashAppearanceConfigurator)
  public func didDisplayFlashMessage(with payload: [Swift.AnyHashable : Any]?)
  public func firebaseConfigrationDone()
}
@_hasMissingDesignatedInitializers final public class PNDeeplink : Swift.CustomStringConvertible {
  final public let deepLinkString: Swift.String?
  final public let deepLinkDict: [Swift.AnyHashable : Any]?
  final public var description: Swift.String {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class PNChannel {
  final public let channelId: Swift.String
  @objc deinit
}
extension pai.PNFlashMode : Swift.Equatable {}
extension pai.PNFlashMode : Swift.Hashable {}
extension pai.PNFlashMode : Swift.RawRepresentable {}
extension pai.PNSDKMode : Swift.Equatable {}
extension pai.PNSDKMode : Swift.Hashable {}
extension pai.PNSDKMode : Swift.RawRepresentable {}
extension pai.PNInboxMessageReadStatus : Swift.Equatable {}
extension pai.PNInboxMessageReadStatus : Swift.Hashable {}
extension pai.PNInboxMessageReadStatus : Swift.RawRepresentable {}
extension pai.PNDeeplinkType : Swift.Equatable {}
extension pai.PNDeeplinkType : Swift.Hashable {}
extension pai.PNDeeplinkType : Swift.RawRepresentable {}
